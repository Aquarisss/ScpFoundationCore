apply plugin: 'com.android.application'
//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

apply from: '../marketSkusCreator.gradle'
apply from: '../apiKeysCreator.gradle'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "ru.dante.scpfoundation"
        minSdkVersion 17
        targetSdkVersion 26

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // Load keystore
            if (rootProject.file('keystore.properties').exists()) {
                def keystorePropertiesFile = rootProject.file("keystore.properties");
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "lang", "mode"

    productFlavors {
        prod {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: false]
        }

        dev {
            dimension "mode"

            manifestPlaceholders = [myDebuggable: true]
        }

        ru {
            dimension "lang"
            matchingFallbacks = ['debug', 'release']
        }

        en {
            dimension "lang"

            applicationIdSuffix ".eng"
            matchingFallbacks = ['debug', 'release']
        }

        pl {
            dimension "lang"

            applicationIdSuffix ".pl"
            matchingFallbacks = ['debug', 'release']
        }

        de {
            dimension "lang"

            applicationIdSuffix ".de"
            matchingFallbacks = ['debug', 'release']
        }

        fr {
            dimension "lang"

            applicationIdSuffix ".fr"
            matchingFallbacks = ['debug', 'release']
        }

        es {
            dimension "lang"

            applicationIdSuffix ".es"
            matchingFallbacks = ['debug', 'release']
        }

        italy {
            dimension "lang"

            applicationIdSuffix ".it"
            matchingFallbacks = ['debug', 'release']
        }

        applicationVariants.all { variant ->
            fillArrays(variant, false)
            fillApiArrays(variant, false)

            logger.debug('variant: ' + variant)

            variant.mergedFlavor.versionCode = buildVersionCodeFromVariant(variant)
            variant.mergedFlavor.versionName = getVersionValueAsString(variant)
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    //dev
    ruDevReleaseCompile
    enDevReleaseCompile
    plDevReleaseCompile
    deDevReleaseCompile
    frDevReleaseCompile
    esDevReleaseCompile
    italyDevReleaseCompile
    //prod
    ruProdReleaseCompile
    enProdReleaseCompile
    plProdReleaseCompile
    deProdReleaseCompile
    frProdReleaseCompile
    esProdReleaseCompile
    italyProdReleaseCompile
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //dagger2
    compile 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    //core module
//    compile project(path: ':core', configuration: 'devRelease')
    compile project(path: ':core')

//    //to use lib via gradle add this lines:
//    //leakcanary (we need it here too according to https://github.com/square/leakcanary/issues/514#issuecomment-318203708)
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
//    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
//    //add core itself at last for each configuration
//    ruDevReleaseCompile(group: 'ru.kuchanov.scp', name: 'core', version: '1.0.0', ext: 'aar', classifier: 'devRelease'){transitive = true}
//    //or
//    ruDevReleaseCompile('ru.kuchanov.scp:core:1.0.1:devRelease@aar') { transitive = true }
}

apply plugin: 'com.google.gms.google-services'